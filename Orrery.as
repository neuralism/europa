package  {		import flash.display.MovieClip;		import com.greensock.TweenMax;	import com.greensock.TimelineMax;	import com.greensock.TweenAlign;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.greensock.text.SplitTextField;	import sg.joshualee.utils.FormatType;	import sg.joshualee.utils.Typer;	import flash.events.Event;	public class Orrery extends MovieClip {				public var days:Number = 0;		public var hours:Number = 0;		public var minutes:Number = 0;		public var seconds:Number = 0;				public var day_str:String; 		public var hours_str:String;		public var minutes_str:String;				public var angle_increment:Number = 8.57;		public var derivative_angle:Number = -90;		public var numIndicators:Number = 42;		public var dialRadius:Number = 293;		public var markerCounter:Number = 0;		public var centerX:Number;		public var centerY:Number;				public var europaOrbit:TweenMax;		public var ioOrbit:TweenMax;		public var ganymedeOrbit:TweenMax;		public var callistoOrbit:TweenMax;		public var tidallockAni:TweenMax;				public var europaText:TweenMax;		public var ioText:TweenMax;		public var ganymedeText:TweenMax;		public var callistoText:TweenMax;				public var europaSpeed:Number = 306.8220384 / 2;		public var ioSpeed:Number = 152.8535047104 / 2;		public var ganymedeSpeed:Number = 618.153375744 / 2;		public var callistoSpeed:Number = 1441.93118976 / 2;				public var eccentricityAni:TweenMax;				public var typerSpeed:int = 1;				public var markers:Array = [];		public var angles:Array = [];				public var textFields:Array = [];		public var angleCounter = 0;		public function Orrery()  		{			init();		}				public function init():void		{			TweenPlugin.activate([TransformMatrixPlugin]);								register();			reset();			setupDial();						ioOrbit.currentProgress = 0.75;			ganymedeOrbit.currentProgress = 0.35;			callistoOrbit.currentProgress = 0.69;						ioText.currentProgress = 0.75;			ganymedeText.currentProgress = 0.35;			callistoText.currentProgress = 0.69;		}			public function register():void		{						europaOrbit = new TweenMax(europa_orbiter, europaSpeed, { transformMatrix: { rotation: 360 }, onRepeat: resetOrrery, ease: Linear.easeNone, repeat: -1 })			ioOrbit = new TweenMax(io_orbiter, ioSpeed, { transformMatrix: { rotation: 360 }, ease: Linear.easeNone, repeat: -1 });			ganymedeOrbit = new TweenMax(ganymede_orbiter, ganymedeSpeed, { transformMatrix: { rotation: 360 }, ease: Linear.easeNone, repeat: -1 });			callistoOrbit = new TweenMax(callisto_orbiter, callistoSpeed, { transformMatrix: { rotation: 360 }, ease: Linear.easeNone, repeat: -1 });						europaText = new TweenMax(europa_orbiter.txt, europaSpeed, { transformMatrix: { rotation: -360 }, ease: Linear.easeNone, repeat: -1 })			ioText = new TweenMax(io_orbiter.txt, ioSpeed, { transformMatrix: { rotation: -360 }, ease: Linear.easeNone, repeat: -1 });			ganymedeText = new TweenMax(ganymede_orbiter.txt, ganymedeSpeed, { transformMatrix: { rotation: -360 }, ease: Linear.easeNone, repeat: -1 });			callistoText = new TweenMax(callisto_orbiter.txt, callistoSpeed, { transformMatrix: { rotation: -360 }, ease: Linear.easeNone, repeat: -1 });						eccentricityAni = new TweenMax(right_panel.eccentricity.indicator, 2, { scaleY: 1.2, ease: Linear.easeNone, yoyo: true, repeat: -1 });			tidallockAni = new TweenMax(right_panel.tidal_indicator, europaSpeed, { transformMatrix: { rotation:360 }, ease: Linear.easeNone, repeat: -1 })						textFields = [	left_panel.days_txt, 						 	left_panel.hours_txt,					     	left_panel.minutes_txt,							left_panel.data0_txt,							left_panel.data1_txt,							left_panel.dataDescr_txt,							right_panel.descr_txt							];					for (var i:int = 0; i < textFields.length; i++)			{				FormatType.configure(textFields[i]);				FormatType.stylise(textFields[i], "Univers LT Std 45 Light", 11, 0x999999, 0.75, 7, "left");			}						centerX = boundingArea.width / 2;			centerY = boundingArea.height / 2;						addEventListener(Event.ENTER_FRAME, angleListener);		}				public function reset():void		{			TweenMax.killTweensOf(this);						europa_orbiter.moon.alpha = europa_orbiter.moon.scaleX = europa_orbiter.moon.scaleY = 0;			io_orbiter.moon.alpha = io_orbiter.moon.scaleX = io_orbiter.moon.scaleY = 0;			ganymede_orbiter.moon.alpha = ganymede_orbiter.moon.scaleX = ganymede_orbiter.moon.scaleY = 0;			callisto_orbiter.moon.alpha = callisto_orbiter.moon.scaleX = callisto_orbiter.moon.scaleY = 0;						jupiter.alpha = 0.0;			jupiter.scaleX = jupiter.scaleY = 1;						europa_orbiter.txt.alpha = 0;			io_orbiter.txt.alpha = 0;			ganymede_orbiter.txt.alpha = 0;			callisto_orbiter.txt.alpha = 0;						europa_path.scaleX = europa_path.scaleY = 1;			europa_path.alpha = 0.0;						europa_zone.scaleX = europa_zone.scaleY = 0.5;			europa_zone.alpha = 0.0;						left_panel.alpha = 0;			left_panel.visible = false;						right_panel.alpha = 0;			right_panel.visible = false;						for (var i:* in markers)			{				markers[i].x = markers[i].offsetX;				markers[i].y = markers[i].offsetY;				markers[i].alpha = 0;			}		}				public function transitIn():void		{			startOrbit();						TweenMax.to(left_panel, 2, { autoAlpha: 1.0, ease: Expo.easeOut, delay: 0 });			TweenMax.to(right_panel, 2, { autoAlpha: 1.0, ease: Expo.easeOut, delay: 0 });						TweenMax.to(jupiter, 4, { alpha: 1.0, scaleX: 1.0 , scaleY: 1.0, ease: Back.easeOut, delay: 1.2 });						TweenMax.to(europa_orbiter.moon, 0.75, { alpha: 1.0, scaleX: 1.0 , scaleY: 1.0, ease: Expo.easeOut, delay: 0.6  });			TweenMax.to(europa_orbiter.txt, 0.75, { alpha: 1.0, ease: Expo.easeOut, delay: 0.6  });						TweenMax.to(io_orbiter.moon, 1, { alpha: 1.0, scaleX: 1.0 , scaleY: 1.0, ease: Expo.easeOut, delay: 1.95  });			TweenMax.to(io_orbiter.txt, 1, { alpha: 1.0, ease: Expo.easeOut, delay: 1.95  });						TweenMax.to(ganymede_orbiter.moon, 1, { alpha: 1.0, scaleX: 1.0 , scaleY: 1.0, ease: Expo.easeOut, delay: 2.1  });			TweenMax.to(ganymede_orbiter.txt, 1, { alpha: 1.0, ease: Expo.easeOut, delay: 2.1  });						TweenMax.to(callisto_orbiter.moon, 1, { alpha: 1.0, scaleX: 1.0 , scaleY: 1.0, ease: Expo.easeOut, delay: 2.25 });			TweenMax.to(callisto_orbiter.txt, 1, { alpha: 1.0, ease: Expo.easeOut, delay: 2.25 });			TweenMax.to(europa_zone, 0.75, { scaleX: 1.0, scaleY: 1.0, alpha: 1.0, ease: Expo.easeOut });			TweenMax.to(europa_path, 1, { scaleX: 1.0, scaleY: 1.0, alpha: 1.0, ease: Expo.easeOut, delay: 0.45 });						eccentricityAni.play();						//Animate Makers			for (var i:* in markers)			{				TweenMax.to(markers[i], 0.75 , { alpha: 1.0, x: markers[i].defaultX, y: markers[i].defaultY, ease: Expo.easeOut, delay: 1 + (i * 0.015) });			}						for (var j:* in textFields)			{				Typer.write(textFields[j], 10);			}		}				public function startOrbit():void		{				tidallockAni.play();			europaOrbit.play();			ioOrbit.play();			ganymedeOrbit.play();			callistoOrbit.play();						europaText.play();			ioText.play();			ganymedeText.play();			callistoText.play();		}				public function angleListener(event:Event):void		{			// Update Markers			var rotationAngle; 						if (europa_orbiter.rotation > 0)			{				rotationAngle = europa_orbiter.rotation;			}						if (europa_orbiter.rotation < 0)			{				rotationAngle = europa_orbiter.rotation + 360;			}						if (rotationAngle + 0.5 > angles[angleCounter])			{				TweenMax.to(markers[angleCounter], 0.25, { tint: 0x00E6FF, ease: Expo.easeOut });				angleCounter++;			}						// Calc Orrery Time			var realtime_seconds = (rotationAngle / 360) * 30.68220384;			var seconds = (realtime_seconds / 30.68220384) * 306822.0384;			var minutes = Math.floor((seconds % 3600 ) / 60);			var hours = Math.floor(seconds / (60 * 60) % 24);			var days = Math.floor((seconds / (60 * 60)) / 24);						left_panel.nDays_txt.text =  convert(days);			left_panel.nHours_txt.text = convert(hours);			left_panel.nMinutes_txt.text = convert(minutes);						function convert(val:Number):String			{				if (val < 10)					return String("0" + val);				else					return String(val);			}		}		public function resetOrrery():void		{			angleCounter = 0;							for (var i:int = 1; i < numIndicators; i++)			{				TweenMax.to(markers[i], 1, { removeTint: true, ease: Expo.easeOut });			}		}		public function setupDial():void		{			for (var i:int = 0; i < numIndicators; i++)			{				var marker:Marker = new Marker();				var radians:Number =  derivative_angle * (Math.PI / 180);				var offset:Number = -20;								marker.defaultX = centerX + dialRadius * Math.cos(radians);				marker.defaultY = centerY + dialRadius * Math.sin(radians);								marker.offsetX = centerX + (dialRadius + offset) * Math.cos(radians);				marker.offsetY = centerY + (dialRadius + offset) * Math.sin(radians);								marker.x = marker.offsetX; 				marker.y = marker.offsetY;								marker.alpha = 0.0;				marker.rotation = i * angle_increment;								FormatType.configure(marker.num_txt);				FormatType.stylise(marker.num_txt, "ClanOT-News", 10, 0x666666, 0.75, 5, "center")								marker.num_txt.text = String(i * 2) + "h";								markers.push(marker);				angles.push(i * angle_increment);								derivative_angle += angle_increment;								addChild(marker);			}		}		public function resize():void		{			left_panel.x = -(Math.round(this.x)) + 20;			left_panel.y = -(Math.round(this.y)) + 20;						right_panel.x = -(Math.round(this.x)) + stage.stageWidth - right_panel.width - 20;			right_panel.y = left_panel.y;		}	}}