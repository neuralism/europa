/** * Version: 1.0 * Updated: 15 Jan 2011 * Created: 14 Jan 2011 **/package sg.joshualee.utils{	import flash.events.MouseEvent;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.*;	public class MouseEvents extends EventDispatcher	{		/**		 * Shortens the addEventListener code into one line.		 *		 * @param target: Object which the listeners are assigned to		 * @param handler: Function that is assigned to the EventListener		 * @param events: Array that stores stipulated MouseEvents		 *		 * @method all: Assigns all MouseEvents		 * @method typical: Assigns typical MouseEvents, "rollOver", "rollOut", "click"		 * @method spitulate: Assigns specified list of MouseEvent		 * @method hover: Assigns hover events, "rollover", "rollOut"		 * @method remove: Removes all event listeners from target object		 * @method exclude: Removes selected events from target object		 *		 * @usage: use a switch() statement to handle the dispatches		 * @example 1 : MouseEvents.all(target_mc, eventHandler);		 * @example 2: MouseEvents.stipulate(target_mc, eventHandler, [MouseEvent.ROLL_OVER, MouseEvent.ROLL_OUT]);		 */		private static var _currentList:Array;		private static var _active:Boolean;				private static var _dragPercentX:Number;		private static var _dragPercentY:Number;		public static const ALL_EVENTS:Array = 		[		 	MouseEvent.CLICK,		  	MouseEvent.DOUBLE_CLICK,		  	MouseEvent.MOUSE_DOWN,		 	MouseEvent.MOUSE_MOVE,		  	MouseEvent.MOUSE_OUT,		  	MouseEvent.MOUSE_OVER,		  	MouseEvent.MOUSE_UP,		  	MouseEvent.ROLL_OUT,		  	MouseEvent.ROLL_OVER		];				public static const TYPICAL_EVENTS:Array = [ MouseEvent.ROLL_OVER, MouseEvent.ROLL_OUT, MouseEvent.CLICK ];		public static const HOVER_EVENTS:Array = [ MouseEvent.ROLL_OVER, MouseEvent.ROLL_OUT ];		public static const DRAG_EVENTS:Array = [ MouseEvent.MOUSE_DOWN, MouseEvent.MOUSE_UP ];				public static const LOCK:String = "lock";		public static const UNLOCK:String = "unlock";				public function MouseEvents()		{					}						public static function all(target:Object, handler:Function):void		{			_currentList = ALL_EVENTS;			_active = true;			iterate(target, handler);		}		public static function typical(target:Object, handler:Function):void		{			_currentList = TYPICAL_EVENTS;			_active = true;			iterate(target, handler);		}		public static function hover(target:Object, handler:Function):void		{			_currentList = HOVER_EVENTS;			_active = true;			iterate(target, handler);		}		public static function stipulate(target:Object, handler:Function, events:Array):void		{			_currentList = events;			_active = true;			iterate(target, handler);		}		public static function remove(target:Object, handler:Function = null):void		{			trace("removing event");			_currentList = ALL_EVENTS;			_active = false;			iterate(target, handler);		}				public static function removeTypical(target:Object, handler:Function = null):void		{			_currentList = TYPICAL_EVENTS;			for (var event:* in _currentList)			{				target.removeEventListener(event, handler);			}		}				public static function exclude(target:Object, handler:Function, events:Array):void		{			_currentList = events;			_active = false;			iterate(target, handler);		}				public static function lock(target:Object):void		{			target.mouseEnabled = target.mouseChildren = false;		}				public static function unlock(target:Object):void		{			target.mouseEnabled = target.mouseChildren = true;		}				private static function iterate(target:Object, handler:Function = null):void		{			target.mouseChildren = target.mouseEnabled = target.buttonMode = _active;						if (_active)			{				for each (var event:* in _currentList)				{					if (!target.hasEventListener(event))					{						target.addEventListener(event, handler);						}				}			}		}				public static function follow(target:Object, enabled:Boolean):void		{			enabled ? target.addEventListener(Event.ENTER_FRAME, handler): target.removeEventListener(Event.ENTER_FRAME, handler);						function handler(event:Event):void			{				target.x += Math.floor((target.stage.mouseX - target.x) * 0.5);				target.y += Math.floor((target.stage.mouseY - target.y) * 0.5);			}		}				/**		 * ...		 * @param	target Object The DisplayObject you are dragging		 * @param	drag_x Boolean Drag X		 * @param	drag_y Boolean Drag Y		 * @param	ease_modifier_x Number Time taken for target to reach mouse position, higher the longer		 * @param	ease_modifier_y Number Time taken for target to reach mouse position, higher the longer		 * @param	limit_x Number Limit X		 * @param	limit_y Number Limit Y		 * @param	start_x Number Start X		 * @param	start_y	Number Start Y		 */				public static function drag(			target:Object,			drag_x:Boolean = true,			drag_y:Boolean = true,			ease_modifier_x:Number = 2,			ease_modifier_y:Number = 2,			limit_x:Number = 0, 			limit_y:Number = 0, 			start_x:Number = 0, 			start_y:Number = 0):void		{				var range_x:Number;			var range_y:Number;						var ease_x:Number;			var ease_y:Number;						target.addEventListener(MouseEvent.MOUSE_DOWN, handler);			target.stage.addEventListener(MouseEvent.MOUSE_UP, handler);			target.buttonMode = true;			function handler(event:MouseEvent):void			{				switch (event.type)				{					case MouseEvent.MOUSE_DOWN:					{						trace("MOUSE_DOWN");						range_x = target.stage.mouseX - target.x;						range_y = target.stage.mouseY - target.y;						if (drag_x) target.addEventListener(Event.ENTER_FRAME, dragger_x);						if (drag_y) target.addEventListener(Event.ENTER_FRAME, dragger_y);						break;					}										case MouseEvent.MOUSE_UP:					{												if (drag_x) target.removeEventListener(Event.ENTER_FRAME, dragger_x);						if (drag_y) target.removeEventListener(Event.ENTER_FRAME, dragger_y);						break;					}				}			}						function dragger_x(event:Event):void			{				ease_x = ((target.stage.mouseX - range_x) - event.currentTarget.x) / ease_modifier_x;				_dragPercentX = ((target.x - start_x) / limit_x) * 100;								// follow the mouse				target.x += + ease_x;				target.x =  Math.floor(target.x);								// limiter				if (limit_x > 0)				{					if (target.x <= start_x) target.x = start_x;									if (target.x >= start_x + limit_x) target.x = start_x + limit_x;				}			}						function dragger_y(event:Event):void			{				ease_y = ((target.stage.mouseY - range_y) - event.currentTarget.y) / ease_modifier_y;				_dragPercentY = ((target.y - start_y) / limit_y) * 100;								// follow the mouse				target.y += ease_y;				target.y =  Math.floor(target.y);								// limiter							if (limit_y > 0)				{					if (target.y <= start_y) target.y = start_y;									if (target.y >= start_y + limit_y) target.y = start_y + limit_y;				}			}		}						}}