package  {		import com.greensock.*;	import com.greensock.TweenMax;	import com.greensock.TimelineMax;	import com.greensock.TweenAlign;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import sg.joshualee.utils.MouseEvents;	import sg.joshualee.utils.Typer;	import sg.joshualee.utils.FormatType;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.Font;	import flash.text.TextFormatAlign;	import flash.text.*;	import flash.text.AntiAliasType;		public class Structure extends MovieClip 	{		public var numLayers:int = 4;		public var diagramList:Array = [];		public var navList:Array = [];		public var curLayer:Number = 0;		public var prevLayer:Number = 0;				public var moleculeList:Array = [];		public var upHitAreas:Array = [];		public var lowHitAreas:Array = [];		public var bisectedList:Array = [];		public var lines:Array = [];				public var typerSpeed:Number = 1;				public var titles:Array = ["Ice Crust","Ocean Subsurface", "Silicate Mantle", "Iron Core"];		public var descriptions:Array = ["Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nunc odio, ornare sit amet scelerisque sed, accumsan non turpis. Fusce in tempor lorem. Quisque vestibulum lectus non erat pharetra sagittis. Morbi eu tortor dolor, eu viverra arcu. Integer ultricies eros leo, vitae imperdiet massa. Etiam sapien ante, pellentesque sed hendrerit eu, laoreet eu nibh. Mauris sit amet dui at mauris sagittis sollicitudin nec et nunc.", "Etiam dapibus feugiat ligula posuere pellentesque. Fusce lobortis scelerisque ultricies. Nulla sed orci sed quam scelerisque molestie et nec magna. Curabitur a nibh et arcu scelerisque pretium non at lectus. Ut porttitor facilisis viverra. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam erat volutpat. Aliquam a tortor id risus fermentum accumsan. Aenean metus.",										 "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nunc odio, ornare sit amet scelerisque sed, accumsan non turpis. Fusce in tempor lorem. Quisque vestibulum lectus non erat pharetra sagittis. Morbi eu tortor dolor, eu viverra arcu. Integer ultricies eros leo, vitae imperdiet massa. Etiam sapien ante, pellentesque sed hendrerit eu, laoreet eu nibh. Mauris sit amet dui at mauris sagittis sollicitudin nec et nunc.", "Etiam dapibus feugiat ligula posuere pellentesque. Fusce lobortis scelerisque ultricies. Nulla sed orci sed quam scelerisque molestie et nec magna. Curabitur a nibh et arcu scelerisque pretium non at lectus. Ut porttitor facilisis viverra. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam erat volutpat. Aliquam a tortor id risus fermentum accumsan."];		public var defaultTitle:String = "Internal Structure";		public var defaultDescr:String = "Etiam dapibus feugiat ligula posuere pellentesque. Fusce lobortis scelerisque ultricies. Nulla sed orci sed quam scelerisque molestie et nec magna. Curabitur a nibh et arcu scelerisque pretium non at lectus. ";				public var zDistance:Array = [[-20, 200, 400, 600], [-200,-20, 200, 400], [-400, -200, -20, 200], [-600, -400, -200, -20]];		public var yDistance:Array = [[-20, 200, 400, 600],	[-200, -20, 200, 400], [-400, -200, -20, 200], [-600, -400, -200, -20]];		public var alphas:Array = [[1, 0.15, 0.1, 0.05], [0, 1, 0.15, 0.1], [0, 0, 1, 0.15], [0, 0, 0, 1]];											public var upPath;		public var lowPath;		public var diagramPath;				public var tlFold:TimelineMax;		public var tmFold:TweenMax;				public var playedOnce:Boolean = false;		public var folded:Boolean = true;				public function Structure()		{			init();		}				public function init():void		{			TweenPlugin.activate([TransformMatrixPlugin, ColorTransformPlugin]);						register();			disableNav();			hatch();			reset();		}				public function test(event:Event):void		{			trace(upPath.width + " " + upPath.height);		}				public function register():void		{			FormatType.configure(left_panel.txt);			FormatType.stylise(left_panel.txt, "Univers LT Std 45 Light", 11, 0x999999, 0.75, 7, "left");						FormatType.configure(left_panel.title_txt);			FormatType.stylise(left_panel.title_txt, "ClanOT-Medium", 11, 0x00E6FF, 0.75, 7, "left");						FormatType.configure(left_panel.number_txt);			FormatType.stylise(left_panel.number_txt, "ClanOT-Medium", 18, 0x00E6FF, 0.5, 7, "left");						upPath = upper_disc.diagram;			lowPath = lower_disc.diagram;						discimg.mask = discimg.area;			discimg.bisected = true;			discimg.id = 0;						upper_disc.mask = upper_disc.area;			lower_disc.mask = lower_disc.area;						left_panel.toggle_btn.toggler = true;			diagramList = [diagram.crust, diagram.subsurface, diagram.mantle, diagram.core];			upHitAreas = [upPath.crust_hitArea, upPath.subsurface_hitArea, upPath.mantle_hitArea, upPath.core_hitArea];			lowHitAreas = [lowPath.crust_hitArea, lowPath.subsurface_hitArea, lowPath.mantle_hitArea, lowPath.core_hitArea];			bisectedList = [[upPath.crust, lowPath.crust], [upPath.subsurface, lowPath.subsurface], [upPath.mantle, lowPath.mantle], [upPath.core, lowPath.core]];			moleculeList = [left_panel.mol0, left_panel.mol1, left_panel.mol2, left_panel.mol3];			navList = [left_panel.crust_btn, left_panel.subsurface_btn, left_panel.mantle_btn, left_panel.core_btn];			lines = [left_panel.line0, left_panel.line1, left_panel.line2];						for (var i:int = 0; i < numLayers; i++)			{				upHitAreas[i].id = i;				upHitAreas[i].bisected = true;								lowHitAreas[i].id = i;				lowHitAreas[i].bisected = true;				moleculeList[i].id = i;				navList[i].id = i;								addListeners(navList[i], navigation);				addListeners(left_panel.toggle_btn, toggleNav);				addListeners(discimg, navigation);				addListeners(upHitAreas[i], navigation);				addListeners(lowHitAreas[i], navigation);			}						addListeners(hud.up_arrow, hudNav);			addListeners(hud.down_arrow, hudNav);		}				public function reset():void		{			discimg.scaleX = discimg.scaleY = 1.0;						TweenMax.killAll();						unswap();			folded = true;			fold.alpha = 0.0;			fold.mouseEnabled = false;						discimg.scaleX = discimg.scaleY = 0.95;			discimg.area.area.scaleY = 1.0;			discimg.alpha = 0.0;						upper_disc.visible = false;			lower_disc.visible = false;			diagram.visible = false;						rotateMarker.alpha = 0.0;			lockMarker.alpha = 0.0;			lockMarker.scaleY = 0.0;			lower_disc.scaleY = 0.0;			hud.alpha = 0.0;						left_panel.line0.alpha = left_panel.line0.scaleX = 0;			left_panel.line1.alpha = left_panel.line1.scaleX = 0;			left_panel.line2.alpha = left_panel.line2.scaleX = 0;						left_panel.toggle_btn.cutAway_txt.alpha = 0.0;			left_panel.toggle_btn.perspective_txt.alpha = 1.0;			left_panel.toggle_btn.plate.knob. x = -6;						left_panel.alpha = 0;			left_panel.visible = false;						right_panel.alpha = 0;			right_panel.visible = false;						for (var i:int = 0; i < numLayers; i++)			{				diagramList[i].y = 0;				diagramList[i].z = 0;				diagramList[i].transform.matrix3D = null;				TweenMax.to(bisectedList[i][0], 0.001, { removeTint: true } );				TweenMax.to(bisectedList[i][1], 0.001, { removeTint: true } );				moleculeList[i].alpha = 0.0;			}						disableNav();			disableHitAreas();		}				public function hatch():void		{			tlFold = new TimelineMax({ paused: true });			tlFold.append(TweenMax.to(discimg.area.area, 0.6, { scaleY: 0.0, ease: Linear.easeNone }));			tlFold.insert(TweenMax.to(fold, 0.45, { alpha: 1, ease: Linear.easeNone }));			tlFold.append(TweenMax.to(lower_disc, 0.45, { scaleY: 0.45, ease: Linear.easeNone }));							tmFold = new TweenMax( tlFold, tlFold.duration, { currentTime: tlFold.duration, ease: Expo.easeInOut, delay: 1.0, onComplete: enableNav, paused: true });			tmFold.play();						TweenMax.to(lockMarker, 0.5, { scaleY: 1, alpha: 1.0, ease: Expo.easeOut, delay: tmFold.duration + tmFold.delay })			TweenMax.to(rotateMarker, 2.0, { alpha: 1.0, ease: Expo.easeOut, delay: tmFold.duration + tmFold.delay + 0.5 });		}				public function updateText(id:Number):void		{			left_panel.txt.text = descriptions[id];			Typer.write(left_panel.txt, typerSpeed);						left_panel.title_txt.text = titles[id];			Typer.write(left_panel.title_txt, typerSpeed);						left_panel.number_txt.text = "0" + String(id + 1);						for (var i:* in moleculeList)			{				if (i == id)				{					TweenMax.to(moleculeList[id], 0.5, { alpha: 1.0, ease: Expo.easeOut });				}								else				{					TweenMax.to(moleculeList[i], 0.5, { alpha: 0, ease: Expo.easeOut });				}			}		}				public function enableNav():void		{			enableHitAreas();						left_panel.toggle_btn.addEventListener(MouseEvent.CLICK, toggleNav);			left_panel.toggle_btn.buttonMode = true;						for (var i:int = 0; i < numLayers; i++)			{				addListeners(navList[i], navigation);			}		}				public function disableNav():void		{			disableHitAreas();						left_panel.toggle_btn.removeEventListener(MouseEvent.CLICK, toggleNav);			left_panel.toggle_btn.buttonMode = false;						for (var i:int = 0; i < numLayers; i++)			{				removeListeners(navList[i], navigation);			}		}			public function resetNavColours():void		{			trace("resettingNav");			for (var i:int = 0; i < numLayers; i++)			{				TweenMax.to(navList[i], 0.5, { removeTint: true, ease: Expo.easeOut });				TweenMax.to(bisectedList[i][0], 0.1, { removeTint: true, ease: Expo.easeOut });				TweenMax.to(bisectedList[i][1], 0.1, { removeTint: true, ease: Expo.easeOut });			}		}				public function resetBisectColours():void		{			for (var i:int = 0; i < numLayers; i++)			{				TweenMax.to(bisectedList[i][0], 0.1, { removeTint: true, ease: Expo.easeOut });				TweenMax.to(bisectedList[i][1], 0.1, { removeTint: true, ease: Expo.easeOut });			}		}				public function updateNav():void		{				if (prevLayer == curLayer)			{				removeListeners(navList[curLayer], navigation);					TweenMax.to(navList[curLayer], 0.25, { tint: 0x00E6FF, ease: Expo.easeOut });			}						else			{				removeListeners(navList[curLayer], navigation);							addListeners(navList[prevLayer], navigation);								TweenMax.to(navList[prevLayer], 0.25, { removeTint: true });				TweenMax.to(navList[curLayer], 0.25, { tint: 0x00E6FF, ease: Expo.easeOut });			}		}				public function navigation(event:Event):void		{			if (event.type == MouseEvent.ROLL_OVER)			{				TweenMax.to(bisectedList[event.currentTarget.id][0], 0.5, { colorTransform:{ tint: 0xFF0000, tintAmount: 0.75 }, ease: Expo.easeOut });				TweenMax.to(bisectedList[event.currentTarget.id][1], 0.5, { colorTransform:{ tint: 0xFF0000, tintAmount: 0.75 }, ease: Expo.easeOut });				TweenMax.to(navList[event.currentTarget.id], 0.25, { tint: 0x00E6FF, ease: Expo.easeOut, overwrite: true });							}						if (event.type == MouseEvent.ROLL_OUT)			{				TweenMax.to(bisectedList[event.currentTarget.id][0], 0.5, { removeTint: true, ease: Expo.easeOut });				TweenMax.to(bisectedList[event.currentTarget.id][1], 0.5, { removeTint: true, ease: Expo.easeOut });								TweenMax.to(navList[event.currentTarget.id], 0.25, { removeTint: true, ease: Expo.easeOut, overwrite: true });			}						if (event.type == MouseEvent.CLICK)			{					disableNav();				split(event.currentTarget.id);				updateText(event.currentTarget.id);				updateNav();			}		}				public function toggleNav(event:MouseEvent):void		{			if (event.type == MouseEvent.ROLL_OVER)			{				TweenMax.to(left_panel.toggle_btn, 0.5, { tint: 0x00E6FF, ease: Expo.easeOut });			}						if (event.type == MouseEvent.ROLL_OUT)			{				TweenMax.to(left_panel.toggle_btn, 0.5, { removeTint: true, ease: Expo.easeOut });			}						if (event.type == MouseEvent.CLICK)			{				disableNav();				if (folded)				{					split(curLayer);				}								else				{					reassemble();				}			}		}		public function hudNav(event:MouseEvent):void		{			if (event.type == MouseEvent.ROLL_OVER)			{				TweenMax.to(event.currentTarget, 0.5, { tint: 0x00E6FF, ease: Expo.easeOut });			}						if (event.type == MouseEvent.ROLL_OUT)			{				TweenMax.to(event.currentTarget, 0.5, { removeTint: true, ease: Expo.easeOut });			}						if (event.type == MouseEvent.CLICK)			{				if (event.currentTarget.name == "up_arrow")				{					if (curLayer > 0)					{						prevLayer = curLayer;						curLayer--;						updateNav();					}														}									else				{					if (curLayer < numLayers - 1)					{						prevLayer = curLayer;						curLayer++;						updateNav();					}				}				updateText(curLayer);				split(curLayer);			}		}				public function split(id:Number):void		{			prevLayer = curLayer;			curLayer = id;						if (folded)			{				// Folds Downwards + Split (1 Smeamless Animation)				var tl:TimelineMax = new TimelineMax({ paused: true, onComplete: function() { enableNav(); updateNav(); resetBisectColours(); } });								tl.insert(TweenMax.to(fold, 1, { alpha: 0, ease: Linear.easeNone }));				tl.insert(TweenMax.to(lower_disc, 1, { scaleY: 1, ease: Linear.easeNone, onComplete: swap }));								for (var i:int = 0; i < numLayers; i++)				{					tl.insert(TweenMax.to(diagramList[i], 0.85, { z: zDistance[id][i], y: yDistance[id][i], alpha: alphas[id][i], ease: Expo.easeIn, delay: 0.5 }));				}								TweenMax.to(diagramList[curLayer], 0.001, { colorTransform:{ tint: 0xFF0000, tintAmount: 0.75 } });				TweenMax.to(bisectedList[curLayer][0], 0.25, { colorTransform:{ tint: 0xFF0000, tintAmount: 0.75 } });				TweenMax.to(bisectedList[curLayer][1], 0.25, { colorTransform:{ tint: 0xFF0000, tintAmount: 0.75 } });								TweenMax.to(tl, tl.duration, { currentTime: tl.duration, ease: Expo.easeInOut });				TweenMax.to(rotateMarker, 1, { alpha: 0.0, ease: Expo.easeOut });				TweenMax.to(lockMarker, 0.5, { alpha: 0.0, scaleY: 0.0, ease: Expo.easeIn });				TweenMax.to(hud, 0.5, { alpha: 1.0, onInitParams: [id], onInit: updateHud, ease: Expo.easeOut });								TweenMax.to(lines[0], 0.5, { alpha: 1, width: 125, ease: Expo.easeOut });				TweenMax.to(lines[1], 0.5, { alpha: 1, width: 125, ease: Expo.easeOut });				TweenMax.to(lines[2], 0.5, { alpha: 1, scaleX: 1.0, ease: Expo.easeOut });				folded = !folded;				updateToggleBtn()				updateText(id);			}						else			{				enableNav();				updateHud(id);								// Split And Animate towards target				for (var j:int = 0; j < numLayers; j++)				{					TweenMax.to(diagramList[j], 1, { z: zDistance[id][j], y: yDistance[id][j], alpha: alphas[id][j], ease: Expo.easeInOut });				}			}		}				// Reset.POSITIONS				public function enableHitAreas():void		{			for (var i:int = 0; i < numLayers; i++)			{				addListeners(discimg, navigation);				addListeners(upHitAreas[i], navigation);				addListeners(lowHitAreas[i], navigation);			}		}				public function disableHitAreas():void		{			for (var i:int = 0; i < numLayers; i++)			{				removeListeners(discimg, navigation);				removeListeners(upHitAreas[i], navigation);				removeListeners(lowHitAreas[i], navigation);			}		}				public function updateHud(id:Number):void		{			TweenMax.to(hud.list, Math.abs((curLayer - id) * 0.25) + 0.5 , { y: -25 * id, ease: Expo.easeOut });						if (curLayer == 0)			{				TweenMax.to(hud.up_arrow, 0.25, { autoAlpha: 0.0, ease: Expo.easeOut });				TweenMax.to(hud.down_arrow, 0.25, { autoAlpha: 1.0, ease: Expo.easeOut });			} 						else if (curLayer == numLayers - 1)			{				TweenMax.to(hud.up_arrow, 0.25, { autoAlpha: 1.0, ease: Expo.easeOut });				TweenMax.to(hud.down_arrow, 0.25, { autoAlpha: 0.0, ease: Expo.easeOut });			}						else			{				TweenMax.to(hud.up_arrow, 0.25, { autoAlpha: 1.0, ease: Expo.easeOut });				TweenMax.to(hud.down_arrow, 0.25, { autoAlpha: 1.0, ease: Expo.easeOut });			}		}				public function reassemble():void		{			resetTextFields();			disableNav();			resetNavColours();						var tl:TimelineMax = new TimelineMax({ paused: true, onComplete: enableNav });						tl.insert(TweenMax.to(fold, 0.95, { alpha: 1, ease: Linear.easeIn, delay: 1 }));			tl.insert(TweenMax.to(lower_disc, 0.95, { scaleY: 0.45, ease: Linear.easeIn, delay: 1, onInit: unswap }));						for (var i:int = 0; i < numLayers; i++)			{				tl.insert(TweenMax.to(diagramList[i], 1, { z: 0, y: 0, alpha: 1.0, ease: Linear.easeNone }));			}							TweenMax.to(tl, tl.duration, { currentTime: tl.duration, ease: Expo.easeInOut });			TweenMax.to(lockMarker, 0.5, { alpha: 1.0, scaleY: 1.0, ease: Expo.easeOut, delay: 1 });			TweenMax.to(rotateMarker, 1, { alpha: 1.0, ease: Expo.easeOut, delay: 1.5 });			TweenMax.to(hud, 0.5, { alpha: 0, ease: Expo.easeOut });			folded = !folded;			updateToggleBtn();		}				function swap():void		{			TweenMax.to(discimg, 0.5, { alpha: 0, ease: Expo.easeOut }); 			diagram.visible = true;			discimg.visible = false;			upper_disc.visible = lower_disc.visible = false;			rotateDiagram();			TweenMax.to(diagramList[curLayer], 3, { removeTint: true, ease: Expo.easeOut, delay: 0.001 });		}				function unswap():void		{			discimg.alpha = 1.0;						diagram.visible = false;			discimg.visible = true;			upper_disc.visible = lower_disc.visible = true;			rotateMasked();		}				public function updateToggleBtn():void		{			if (folded)			{				TweenMax.to(left_panel.toggle_btn.plate.knob, 0.25, { x: -6, ease: Expo.easeOut });				TweenMax.to(left_panel.toggle_btn.cutAway_txt, 0.25, { alpha: 0.0, ease: Expo.easeOut });				TweenMax.to(left_panel.toggle_btn.perspective_txt, 0.25, { alpha: 1.0, ease: Expo.easeOut });			}						else			{				TweenMax.to(left_panel.toggle_btn.plate.knob, 0.25, { x: 6, ease: Expo.easeOut });				TweenMax.to(left_panel.toggle_btn.cutAway_txt, 0.25, { alpha: 1.0, ease: Expo.easeOut });				TweenMax.to(left_panel.toggle_btn.perspective_txt, 0.25, { alpha: 0.0, ease: Expo.easeOut });			}		}						// Transition.IN		public function transitIn():void		{						trace(upPath.height + " " + upPath.width);						TweenMax.to(left_panel, 2, { autoAlpha: 1.0, ease: Expo.easeOut, delay: 0 });			TweenMax.to(right_panel, 2, { autoAlpha: 1.0, ease: Expo.easeOut, delay: 0 });						hatch();			rotateMasked();			TweenMax.to(discimg, 1.0, { scaleX: 1.0, scaleY: 1.0, alpha: 1.0, ease: Back.easeOut, overwrite: 2,						onComplete: function()						{							lower_disc.visible = true; 							upper_disc.visible = true;						}			});		}				public function rotateMasked():void		{			TweenMax.to(rotateMarker, 150, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });			TweenMax.to(discimg.photo, 150, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });			TweenMax.to(upPath.crust.img, 150, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });			TweenMax.to(upPath.subsurface.img, 200, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });			TweenMax.to(lowPath.crust.img, 150, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });			TweenMax.to(lowPath.subsurface.img, 200, { transformMatrix:{rotation:360}, ease: Linear.easeNone, repeat: -1 });		}				public function rotateDiagram():void		{			TweenMax.to(diagram.crust.img, 150, { transformMatrix:{rotation:360}, ease: Linear.easeOut, repeat: -1 });			TweenMax.to(diagram.subsurface.img, 200, { transformMatrix:{rotation:360}, ease: Linear.easeOut, repeat: -1 });		}				public function transitInComplete():void		{					}				public function resetTextFields():void		{			left_panel.number_txt.text = "";			left_panel.txt.text = "";			left_panel.title_txt.text = "";						TweenMax.to(lines[0], 0.5, { alpha: 1, width: 0, ease: Expo.easeOut });			TweenMax.to(lines[1], 0.5, { alpha: 1, width: 0, ease: Expo.easeOut });			TweenMax.to(lines[2], 0.5, { alpha: 1, scaleX: 0, ease: Expo.easeOut });						for (var i:* in moleculeList)			{				TweenMax.to(moleculeList[i], 0.5, { alpha: 0, ease: Expo.easeOut });			}					}		public function resize():void		{			left_panel.x = -(Math.round(this.x)) + 20;			left_panel.y = -(Math.round(this.y)) + 20;						right_panel.x = -(Math.round(this.x)) + stage.stageWidth - right_panel.width - 20;			right_panel.y = left_panel.y;		}				public function addListeners(target:*, handler:Function):void		{			target.addEventListener(MouseEvent.ROLL_OUT, handler);			target.addEventListener(MouseEvent.ROLL_OVER, handler);			target.addEventListener(MouseEvent.CLICK, handler);			target.buttonMode = true;		}				public function removeListeners(target:*, handler:Function):void		{			target.removeEventListener(MouseEvent.ROLL_OUT, handler);			target.removeEventListener(MouseEvent.ROLL_OVER, handler);			target.removeEventListener(MouseEvent.CLICK, handler);			target.buttonMode = false;		}				// Transition.OUT		public function transitOut():void		{					}		public function transitOutComplete():void		{					}	}}